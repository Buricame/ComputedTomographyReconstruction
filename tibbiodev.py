# -*- coding: utf-8 -*-
"""TibbiOdev.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gqosAxOClF1In3RPWSA3LMZzmdDxiWlW
"""

import numpy as np
import matplotlib.pyplot as plt
from skimage.data import shepp_logan_phantom
from scipy.ndimage import rotate
from scipy.fft import fft, ifft, fftfreq
from skimage import io

# Shepp-Logan phantom kullanarak örnek bir görüntü oluştur
image = shepp_logan_phantom()

# Kullanıcının ekleyeceği başka bir görüntü
user_image = io.imread('/content/Beyin1.jpg', as_gray=True)  # Kendi görüntü dosyanızın yolunu ekleyin

# Projeksiyon açılarını belirle
theta = np.linspace(0., 180., 180, endpoint=False)

# Sinogram hesaplama fonksiyonu
def calculate_sinogram(image, theta):
    sinogram = np.zeros((len(theta), image.shape[0]))
    for i, angle in enumerate(theta):
        rotated_image = rotate(image, angle, reshape=False)
        sinogram[i] = np.sum(rotated_image, axis=0)
    return sinogram

sinogram = calculate_sinogram(image, theta)
user_sinogram = calculate_sinogram(user_image, theta)

# Farklı filtre fonksiyonlarını tanımla
def ramp_filter(projection):
    N = len(projection)
    freqs = fftfreq(N)
    ramp = np.abs(freqs)
    projection_fft = fft(projection)
    filtered_projection = projection_fft * ramp
    return np.real(ifft(filtered_projection))

def shepp_logan_filter(projection):
    N = len(projection)
    freqs = fftfreq(N)
    filter_shepp = np.abs(freqs) * np.sinc(freqs / (2 * np.pi))
    projection_fft = fft(projection)
    filtered_projection = projection_fft * filter_shepp
    return np.real(ifft(filtered_projection))

def cosine_filter(projection):
    N = len(projection)
    freqs = fftfreq(N)
    filter_cosine = np.abs(freqs) * np.cos(np.pi * freqs / 2)
    projection_fft = fft(projection)
    filtered_projection = projection_fft * filter_cosine
    return np.real(ifft(filtered_projection))

def hamming_filter(projection):
    N = len(projection)
    freqs = fftfreq(N)
    filter_hamming = np.abs(freqs) * (0.54 + 0.46 * np.cos(2 * np.pi * freqs))
    projection_fft = fft(projection)
    filtered_projection = projection_fft * filter_hamming
    return np.real(ifft(filtered_projection))

filters = {
    'Ram-Lak': ramp_filter,
    'Shepp-Logan': shepp_logan_filter,
    'Cosine': cosine_filter,
    'Hamming': hamming_filter
}

# Filtrelenmiş sinogramları ve rekonstrükte edilen görüntüleri hesapla ve sakla
def apply_filters_and_reconstruct(sinogram, theta):
    filtered_sinograms = {}
    reconstructions = {}

    for filter_name, filter_func in filters.items():
        filtered_sinogram = np.zeros_like(sinogram)
        for i in range(sinogram.shape[0]):
            filtered_sinogram[i] = filter_func(sinogram[i])

        filtered_sinograms[filter_name] = filtered_sinogram

        reconstruction = np.zeros((sinogram.shape[1], sinogram.shape[1]))
        for i, angle in enumerate(theta):
            filtered_proj = filtered_sinogram[i]
            filtered_proj_reshaped = np.tile(filtered_proj, (sinogram.shape[1], 1))
            rotated_proj = rotate(filtered_proj_reshaped, -angle, reshape=False)
            reconstruction += rotated_proj

        reconstruction /= len(theta)
        reconstructions[filter_name] = reconstruction

    return filtered_sinograms, reconstructions

filtered_sinograms, reconstructions = apply_filters_and_reconstruct(sinogram, theta)
user_filtered_sinograms, user_reconstructions = apply_filters_and_reconstruct(user_sinogram, theta)

# Kombine edilmiş filtreler ile işlem
def combined_filter(projection):
    N = len(projection)
    freqs = fftfreq(N)

    ramp = np.abs(freqs)
    shepp = np.abs(freqs) * np.sinc(freqs / (2 * np.pi))
    cosine = np.abs(freqs) * np.cos(np.pi * freqs / 2)
    hamming = np.abs(freqs) * (0.54 + 0.46 * np.cos(2 * np.pi * freqs))

    combined = (ramp + shepp + cosine + hamming) / 4

    projection_fft = fft(projection)
    filtered_projection = projection_fft * combined
    return np.real(ifft(filtered_projection))

def apply_combined_filter(sinogram, theta):
    filtered_sinogram_combined = np.zeros_like(sinogram)
    for i in range(sinogram.shape[0]):
        filtered_sinogram_combined[i] = combined_filter(sinogram[i])

    reconstruction_combined = np.zeros((sinogram.shape[1], sinogram.shape[1]))
    for i, angle in enumerate(theta):
        filtered_proj = filtered_sinogram_combined[i]
        filtered_proj_reshaped = np.tile(filtered_proj, (sinogram.shape[1], 1))
        rotated_proj = rotate(filtered_proj_reshaped, -angle, reshape=False)
        reconstruction_combined += rotated_proj

    reconstruction_combined /= len(theta)
    return filtered_sinogram_combined, reconstruction_combined

filtered_sinogram_combined, reconstruction_combined = apply_combined_filter(sinogram, theta)
user_filtered_sinogram_combined, user_reconstruction_combined = apply_combined_filter(user_sinogram, theta)
# Sinogramları ve rekonstrükte edilen görüntüleri yan yana göster
plt.figure(figsize=(20, 15))

# Orijinal sinogram ve kullanıcı sinogramı
plt.subplot(3, len(filters) + 2, 1)
plt.imshow(sinogram.T, cmap='gray', aspect='auto')
plt.title("Orijinal Sinogram")

plt.subplot(3, len(filters) + 2, len(filters) + 3)
plt.imshow(user_sinogram.T, cmap='gray', aspect='auto')
plt.title("Kullanıcı Sinogramı")

# Filtrelenmiş sinogramlar
for i, (filter_name, filtered_sinogram) in enumerate(filtered_sinograms.items(), 2):
    plt.subplot(3, len(filters) + 2, i)
    plt.imshow(filtered_sinogram.T, cmap='gray', aspect='auto')
    plt.title(f"{filter_name} Filtrelenmiş Sinogram")

for i, (filter_name, filtered_sinogram) in enumerate(user_filtered_sinograms.items(), len(filters) + 4):
    plt.subplot(3, len(filters) + 2, i)
    plt.imshow(filtered_sinogram.T, cmap='gray', aspect='auto')
    plt.title(f"Kullanıcı {filter_name} Sinogramı")

# Kombine sinogramlar
plt.subplot(3, len(filters) + 2, len(filters) + 2)
plt.imshow(filtered_sinogram_combined.T, cmap='gray', aspect='auto')
plt.title("Kombine Filtrelenmiş Sinogram")

plt.subplot(3, len(filters) + 2, 2 * (len(filters) + 2))
plt.imshow(user_filtered_sinogram_combined.T, cmap='gray', aspect='auto')
plt.title("Kullanıcı Kombine Sinogram")

# Rekonstrükte edilen görüntüleri yan yana göster
plt.figure(figsize=(20, 15))

# Orijinal ve kullanıcı görüntüleri
plt.subplot(2, len(filters) + 2, 1)
plt.imshow(image, cmap='gray')
plt.title("Orijinal Görüntü")

plt.subplot(2, len(filters) + 2, len(filters) + 3)
plt.imshow(user_image, cmap='gray')
plt.title("Kullanıcı Görüntüsü")

# Rekonstrükte edilen görüntüler
for i, (filter_name, reconstruction) in enumerate(reconstructions.items(), 2):
    plt.subplot(2, len(filters) + 2, i)
    plt.imshow(reconstruction, cmap='gray')
    plt.title(f"{filter_name} Filtre ile Rekonstrükte Edilen")

for i, (filter_name, reconstruction) in enumerate(user_reconstructions.items(), len(filters) + 4):
    plt.subplot(2, len(filters) + 2, i)
    plt.imshow(reconstruction, cmap='gray')
    plt.title(f"Kullanıcı {filter_name} Rekonstrüksiyonu")

# Kombine rekonstrüksiyonlar
plt.subplot(2, len(filters) + 2, len(filters) + 2)
plt.imshow(reconstruction_combined, cmap='gray')
plt.title("Kombine Filtre ile Rekonstrüksiyon")

plt.subplot(2, len(filters) + 2, 2 * (len(filters) + 2))
plt.imshow(user_reconstruction_combined, cmap='gray')
plt.title("Kullanıcı Kombine Rekonstrüksiyon")

plt.tight_layout()
plt.show()
